#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Задание 5.2a

Всё, как в задании 5.2, но, если пользователь ввел адрес хоста, а не адрес сети,
надо преобразовать адрес хоста в адрес сети и вывести адрес сети и маску,
как в задании 5.2.

Пример адреса сети (все биты хостовой части равны нулю):
* 10.0.1.0/24
* 190.1.0.0/16

Пример адреса хоста:
* 10.0.1.1/24 - хост из сети 10.0.1.0/24
* 10.0.5.195/28 - хост из сети 10.0.5.192/28

Если пользователь ввел адрес 10.0.1.1/24, вывод должен быть таким:

Network:
10        0         1         0
00001010  00000000  00000001  00000000

Mask:
/24
255       255       255       0
11111111  11111111  11111111  00000000


Проверить работу скрипта на разных комбинациях хост/маска, например:
    10.0.5.195/28, 10.0.1.1/24

Вывод сети и маски должен быть упорядочен также, как в примере:
- столбцами
- ширина столбца 10 символов (в двоичном формате
  надо добавить два пробела между столбцами
  для разделения октетов между собой)


Подсказка:
Есть адрес хоста в двоичном формате и маска сети 28. Адрес сети это первые 28 бит
адреса хоста + 4 ноля.
То есть, например, адрес хоста 10.1.1.195/28 в двоичном формате будет
bin_ip = "00001010000000010000000111000011"

А адрес сети будет первых 28 символов из bin_ip + 0000 (4 потому что всего
в адресе может быть 32 бита, а 32 - 28 = 4)
00001010000000010000000111000000

Ограничение: Все задания надо выполнять используя только пройденные темы.

"""

template = """
Network:
{0:<8}  {1:<8}  {2:<8}  {3:<8}
{0:08b}  {1:08b}  {2:08b}  {3:08b}
Mask:
/{4}
{5:<8}  {6:<8}  {7:<8}  {8:<8}
{5:08b}  {6:08b}  {7:08b}  {8:08b}
"""


network = input("Введите подсеть в формате x.x.x.x/y: ")

network_list = network.split('/')

lan = network_list[0]

mask = network_list[1]

lan_list = lan.split('.')

zero = 32 - int(mask)

mask_bin = "1" * int(mask) + "0" * zero
mask_bin_int = int("0b" + mask_bin, 2)

octet_one = int("0b" + mask_bin[0:8], 2)
octet_two = int("0b" + mask_bin[8:16], 2)
octet_three = int("0b" + mask_bin[16:24], 2)
octet_four = int("0b" + mask_bin[24:32], 2)

lan = (bin(int(lan_list[3]))[:-zero])
lan_bits = str(lan) + "0" * zero 
lan_bits_int = int(lan_bits, 2)

print(template.format(int(lan_list[0]), int(lan_list[1]), int(lan_list[2]), lan_bits_int, mask, octet_one, octet_two, octet_three, octet_four))



